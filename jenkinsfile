pipeline {
    agent any
    environment {
        AWS_CREDENTIALS_ID = 'aws_cred'
    }
    stages {
        // Checkout stage
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Govindmahra/Hasicorp-vault.git'
            }
        }

        // Set Credentials and Terraform Init stage
        stage('Terraform Init') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS_ID}"]]) {
                    dir('infra') {
                        sh '''
                            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                            
                            terraform init
                        '''
                    }
                }
            }
        }

        // Terraform Plan stage
        stage('Terraform Plan') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS_ID}"]]) {
                    dir('infra') {
                        sh '''
                            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                            
                            terraform plan -out=tfplan
                        '''
                    }
                }
            }
        }

        // Terraform Apply stage
        stage('Terraform Apply') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS_ID}"]]) {
                    dir('infra') {
                        sh '''
                            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                            
                            terraform apply tfplan
                        '''
                    }
                }
            }
        }

        // Wait for downstream job (Ansible Pipeline) to complete
        stage('Wait for Ansible Pipeline') {
            steps {
                build job: 'ansible-pipeline', wait: true
            }
        }

        // Terraform Destroy stage
        stage('Terraform Destroy') {
            steps {
                script {
                    def userInput = input(id: 'userInput', message: 'Do you really want to destroy the infrastructure?', parameters: [choice(name: 'confirm', choices: ['no', 'yes'], description: 'Choose yes to destroy, no to cancel.')])
                    if (userInput == 'yes') {
                        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS_ID}"]]) {
                            dir('infra') {
                                sh '''
                                    export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                                    export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                                    
                                    terraform destroy -auto-approve
                                '''
                            }
                        }
                    } else {
                        echo 'Terraform Destroy canceled.'
                    }
                }
            }
        }
    }
}
